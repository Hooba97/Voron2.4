[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_50443403102B461C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy 
min_temp: 10 
max_temp: 100 

[temperature_sensor btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26

# For all Eddy (USB/Duo/Coil)
[probe_eddy_ng btt_eddy]
sensor_type: ldc1612
# Eddy USB/Duo values below. For Eddy Coil, replace these two with mcu/bus for your setup.
i2c_mcu: eddy
i2c_bus: i2c0f
samples_per_second: 500 # 250 by default
x_offset: 0
y_offset: 21.42

[bed_mesh]
horizontal_move_z: 2
speed: 400
#speed: 200
mesh_min: 25, 31.42 
mesh_max: 325, 325
probe_count: 9, 9
algorithm: bicubic
scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

[safe_z_home]
home_xy_position: 175, 175
z_hop: 10
z_hop_speed: 25
speed: 200

[quad_gantry_level]
gantry_corners:
	-60,-10
	410,420
points:
	50,25
	50,275
	300,275
	300,25
speed: 150
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10
    
#gantry_corners:
#	-80,-55
#	390,375
#points:
#	57.5,10
#	57.5,200
#	247.5,200
#	247.5,10


########NG
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    BED_MESH_CLEAR
    # if QGL has not been done yet, do two rounds at 10mm height first
    # to correct any major skew
    {% if not printer.quad_gantry_level.applied %}
    _QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1      
    {% endif %}
    # Finish off with a low QGL for precision
    _QUAD_GANTRY_LEVEL horizontal_move_z=2
    RESTORE_GCODE_STATE NAME=STATE_QGL

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    #BTT_BED_MESH_CALIBRATE METHOD=rapid_scan ADAPTIVE=1
    _BED_MESH_CALIBRATE {rawparams}  ADAPTIVE=1
    M140 S{TARGET_TEMP}
######NG

[save_variables]
filename: ~/printer_data/config/variables.cfg

[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.

#[gcode_macro G28]
#rename_existing: G28.1
#gcode:
#  G28.1 {rawparams}
#  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
#    PROBE
#    SET_Z_FROM_PROBE
#  {% endif %}

#[gcode_macro SET_Z_FROM_PROBE]
#gcode:
#    {% set cf = printer.configfile.settings %}
#    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
#    G90
#    G1 Z{cf.safe_z_home.z_hop}

#[gcode_macro SET_GCODE_OFFSET]
#rename_existing: SET_GCODE_OFFSET_ORIG
#variable_restored: False  # Mark whether the var has been restored from NVM
#variable_runtime_offset: 0
#gcode:
#  SET_GCODE_OFFSET_ORIG { rawparams }

#[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
#gcode:
#  BED_MESH_CLEAR
#  G28 X Y
#  G90 # Abs positioning
#  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
#  {% if 'z' not in printer.toolhead.homed_axes %}
#    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
#  {% endif %}
#  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}

#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BTT_BED_MESH_CALIBRATE
#gcode:
#BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
